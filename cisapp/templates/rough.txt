# View to handle AJAX request for precipitation data
# def sf_db_async(request):
#     date_to_query = request.GET.get('date_to_query', '25-04-1986')  
#     column_name = request.GET.get('column_name', '2')  # The column name you want to fetch, you can change this as needed

#     # Execute raw SQL query to fetch specific row from column B
#     with connection.cursor() as cursor:
#         query = "SELECT `{}` FROM District_average_daily WHERE MyUnknownColumn = %s;".format(column_name)
#         cursor.execute(query, [date_to_query])
#         column_b_value = cursor.fetchone()[0]  # Assuming there's only one value for the given date
#     # return JsonResponse({'column_name': column_name, 'column_b_value': column_b_value})
#         return render(request,'sf_db_async.html',{'column_b_value': column_b_value, 'column_name': column_name})







xhr.onreadystatechange = function() {
    if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
            var response = xhr.responseText;
            document.getElementById("district-info").innerHTML = response;
            
        } else {
            console.error('Request failed:', xhr.statusText);
        }
    }
};








netcdf_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data', 'pcp_1979.nc')



pcp_nc_file_path = '~/datahub/meteorological/gridded/IMDAA/daily/PCP/'






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>get coordinates</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""/>

    <style>
        #map{
        height: 700px; 
        width:1000px;
        margin:auto;}
    </style>
</head>
<body>
    <form id="submitAddress">
        <input type="text" id="fname" name="fname" placeholder="type your address here"><br>
        <input type="submit" value="Submit">
        
    </form>
    <div id="map"></div>
</body>
</html>
 <!-- Make sure you put this AFTER Leaflet's CSS -->
 <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
     integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
     crossorigin=""></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/leaflet-timedimension@1.1.1/dist/leaflet.timedimension.min.js"></script>  
<!-- Make sure you put this AFTER leaflet.js, when using with leaflet -->
<script> 
    // your_script.js

// Set up the map
var map = L.map('map').setView([0, 0], 2);

// Add OpenStreetMap as the base layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Â© OpenStreetMap contributors'
}).addTo(map);





map.on('click', function (e) {
    var latlng = e.latlng;
    var lat=latlng.lat;
    var lng=latlng.lng
    console.log(lat,lng);

    getOut(lat,lng);



   
    

});


document.getElementById("submitAddress").onsubmit = function(event) {
    event.preventDefault(); // Prevent form submission
    
    // Retrieve the value of the input field
    var address = document.getElementById("fname").value;
    
    // URL-encode the address
    var encodedAddresstemp = encodeURIComponent(address);
            
    // Print the encoded value to the console
    
    var encodedAddress="search?q="+encodedAddresstemp+"&format=json";
    var completeurl="https://nominatim.openstreetmap.org/"+encodedAddress;
    console.log(completeurl);

    // Make an AJAX request using fetch API
    fetch(completeurl)
        .then(response => response.json())
        .then(data => {
            // Extract lat and lon from the response
            if (data.length > 0) {
                var lat = data[0].lat;
                var lng = data[0].lon;
                
                // Print lat and lon to the console
                console.log("Latitude:", lat);
                console.log("Longitude:", lng);
                getOut(lat,lng);
                
                
            } else {
                console.log("Address could not be found.");
            }
        })
        .catch(error => {
            console.error("Error:", error);
        });
    
    
};

function getOut(lat, lng){
    // Redirect to Django view with lat/lng as query parameters
    urlData= "{% url 'showPrecipitation' %}?lat=" + lat + "&lng=" + lng;
    window.location.href =urlData;
};








</script>



document.getElementById('showPrecipitation').checked = true; // Automatically check Precipitation radio button



# Plot the time series data
p.line(df.index, df['__xarray_dataarray_variable__'], legend_label='Wind Speed', line_width=2)

# Define y2, y1, and y3
y2 = [3] * len(df)
y1 = [1] * len(df)
y3 = [5] * len(df)

# y2 = 3
y2 = [3] * len(df)
p.line(df.index, y2, legend_label='Y2', line_width=0.5, color='orange')   
# y1 = 1
y1 = [1] * len(df)
p.line(df.index, y1, legend_label='Y1', line_width=0.5, color='green')

# y3 = 5
y3 = [5] * len(df)
p.line(df.index, y3, legend_label='Y3', line_width=0.5, color='red')




def showwindspeed(request):
    lat = request.GET.get('lat', None)
    lng = request.GET.get('lng', None)
    # Define path to NetCDF file (assuming 'nc' subfolder in static)
    netcdf_file_path = os.path.join(settings.BASE_DIR, 'app2', 'static', 'nc', 'wind.nc')

    # Read data from NetCDF file
    ds = xr.open_dataset(netcdf_file_path)
    valuearray = ds.__xarray_dataarray_variable__

    # Select data at specific latitude and longitude
    val = valuearray.sel(lon=lng, lat=lat, method='nearest')

    # Convert data to a DataFrame
    df = val.to_dataframe()

    # Create a Bokeh figure
    p = figure(title="Time Series Plot", x_axis_label='Date', y_axis_label='Wind Speed', x_axis_type='datetime', width=700)
    print(df.index)

    # Plot the wind speed
    wind_speed_line = p.line(df.index, df['__xarray_dataarray_variable__'], legend_label='Wind Speed', line_width=2, color='blue')

    # y2 = 3
    y2 = [3] * len(df)
    orange_line = p.line(df.index, y2, legend_label='Y2', line_width=0.5, color='orange', visible=False)

    # y1 = 1
    y1 = [1] * len(df)
    green_line = p.line(df.index, y1, legend_label='Y1', line_width=0.5, color='green', visible=False)

    # y3 = 5
    y3 = [5] * len(df)
    red_line = p.line(df.index, y3, legend_label='Y3', line_width=0.5, color='red', visible=False)

    # Create toggle buttons
    y2_toggle = Toggle(label="Y2", active=False)
    y1_toggle = Toggle(label="Y1", active=False)
    y3_toggle = Toggle(label="Y3", active=False)

    # Add callback to toggle visibility
    y2_toggle.js_link('active', orange_line, 'visible')
    y1_toggle.js_link('active', green_line, 'visible')
    y3_toggle.js_link('active', red_line, 'visible')

    # Hide the Bokeh logo from the toolbar
    p.toolbar.logo = None

    # Add hover tool
    hover = HoverTool(tooltips=[
        ("Date", "@x{%d/%m/%Y}"),
        ("Wind Speed", "@y"),
    ], formatters={'@x': 'datetime'})
    p.add_tools(hover)

    tap = TapTool()
    tap.callback = CustomJS(args=dict(hover=hover), code="""
        if (!hover.active) {
            hover.active = true;
        } else {
            hover.active = false;
        }
    """)
    p.add_tools(tap)

    # Convert the plot to HTML
    script, div = components(p)

    df.index = pd.to_datetime(df.index)  # Assuming your index is already in datetime format, otherwise, convert it
    # Drop latitude and longitude columns
    df = df.drop(columns=['lat', 'lon'])

    # Convert data to CSV format
    csv_data = df.to_csv()

    # Pass the CSV data along with the script and div to the template
    context = {
        'script': script,
        'div': div,
        'csv_data': csv_data,
        'y2_toggle': y2_toggle,
        'y1_toggle': y1_toggle,
        'y3_toggle': y3_toggle,
    }

    return render(request, 'showwindspeed.html', context)


