# View to handle AJAX request for precipitation data
# def sf_db_async(request):
#     date_to_query = request.GET.get('date_to_query', '25-04-1986')  
#     column_name = request.GET.get('column_name', '2')  # The column name you want to fetch, you can change this as needed

#     # Execute raw SQL query to fetch specific row from column B
#     with connection.cursor() as cursor:
#         query = "SELECT `{}` FROM District_average_daily WHERE MyUnknownColumn = %s;".format(column_name)
#         cursor.execute(query, [date_to_query])
#         column_b_value = cursor.fetchone()[0]  # Assuming there's only one value for the given date
#     # return JsonResponse({'column_name': column_name, 'column_b_value': column_b_value})
#         return render(request,'sf_db_async.html',{'column_b_value': column_b_value, 'column_name': column_name})







xhr.onreadystatechange = function() {
    if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
            var response = xhr.responseText;
            document.getElementById("district-info").innerHTML = response;
            
        } else {
            console.error('Request failed:', xhr.statusText);
        }
    }
};








netcdf_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data', 'pcp_1979.nc')



pcp_nc_file_path = '~/datahub/meteorological/gridded/IMDAA/daily/PCP/'






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>get coordinates</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""/>

    <style>
        #map{
        height: 700px; 
        width:1000px;
        margin:auto;}
    </style>
</head>
<body>
    <form id="submitAddress">
        <input type="text" id="fname" name="fname" placeholder="type your address here"><br>
        <input type="submit" value="Submit">
        
    </form>
    <div id="map"></div>
</body>
</html>
 <!-- Make sure you put this AFTER Leaflet's CSS -->
 <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
     integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
     crossorigin=""></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/leaflet-timedimension@1.1.1/dist/leaflet.timedimension.min.js"></script>  
<!-- Make sure you put this AFTER leaflet.js, when using with leaflet -->
<script> 
    // your_script.js

// Set up the map
var map = L.map('map').setView([0, 0], 2);

// Add OpenStreetMap as the base layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Â© OpenStreetMap contributors'
}).addTo(map);





map.on('click', function (e) {
    var latlng = e.latlng;
    var lat=latlng.lat;
    var lng=latlng.lng
    console.log(lat,lng);

    getOut(lat,lng);



   
    

});


document.getElementById("submitAddress").onsubmit = function(event) {
    event.preventDefault(); // Prevent form submission
    
    // Retrieve the value of the input field
    var address = document.getElementById("fname").value;
    
    // URL-encode the address
    var encodedAddresstemp = encodeURIComponent(address);
            
    // Print the encoded value to the console
    
    var encodedAddress="search?q="+encodedAddresstemp+"&format=json";
    var completeurl="https://nominatim.openstreetmap.org/"+encodedAddress;
    console.log(completeurl);

    // Make an AJAX request using fetch API
    fetch(completeurl)
        .then(response => response.json())
        .then(data => {
            // Extract lat and lon from the response
            if (data.length > 0) {
                var lat = data[0].lat;
                var lng = data[0].lon;
                
                // Print lat and lon to the console
                console.log("Latitude:", lat);
                console.log("Longitude:", lng);
                getOut(lat,lng);
                
                
            } else {
                console.log("Address could not be found.");
            }
        })
        .catch(error => {
            console.error("Error:", error);
        });
    
    
};

function getOut(lat, lng){
    // Redirect to Django view with lat/lng as query parameters
    urlData= "{% url 'showPrecipitation' %}?lat=" + lat + "&lng=" + lng;
    window.location.href =urlData;
};








</script>



document.getElementById('showPrecipitation').checked = true; // Automatically check Precipitation radio button

